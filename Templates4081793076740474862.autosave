class Player{
    public float x, y,
                sx=40, sy=40,
                speed,
                health;

    public int r, g, b;
    public boolean right, left, up, down;

    Player(){
        x = width/2; y = height/2;
        health = 100.0f;
        speed = 4.0f;
    }

    public void show(){
        fill(0);
        ellipse(x, y, sx, sy);
    }

    public void showUpdate(){
        if(left){
            x -= speed;
        }
        if(right){
            x += speed;
        }
        if(up){
            y -= speed;
        }
        if(down){
            y += speed;
        }
    }

    public void updateVars(float xx, float yy){
        x = xx; y = yy;
    }

    public void healthBarShow(){
        rectMode(CORNER);
        fill(255, 0, 0);
        rect(x - 25, y - 40, 50, 10);
        fill(0,255,0);
        rect(x - 25, y - 40, health/2, 10);

        rectMode(CENTER);
    }
    
    public void takeDamage(float dmg){
        health -= dmg;
    }
}

class Projectiles{
    public float x, y,
                sx, sy,
                r, g, b,
                stepX, stepY,
                bulletDamage;

    private boolean local;

    Projectiles(float xx, float yy, boolean loc){
        local = loc;
        bulletDamage = 10.0f;
        showRGB();
        calcTrajectories(xx, yy);
        sx = 10; sy = 10;
    }

    private void calcTrajectories(float xx, float yy){
        Player tempPlayer;

        float difX, difY;

        tempPlayer = selectTempPlayer();

        x = tempPlayer.x;
        y = tempPlayer.y;

        difX = tempPlayer.x - xx;
        difY = tempPlayer.y - yy;

        calcHypotAndAssign(difX, difY);
    }

    private void calcHypotAndAssign(float x, float y){
        float distance;
        distance = (float)Math.hypot(x, y);
        stepX = x/distance;
        stepY = y/distance;
    }

    private Player selectTempPlayer(){
        if (local){
            if (isCln){
                return selectPlayer(true);
            }else{
                return selectPlayer(false);
            }
        }else{
            if (isCln){
                return selectPlayer(false);
            }else{
                return selectPlayer(true);
            }
        }
    }

    private Player selectPlayer(boolean select){return select ? clnPlayer : srvPlayer;}

    private void showRGB(){
        if(local){
            r=0;
            g=255;
            b=0;
        }else{
            r=255;
            g=0;
            b=0;
        }
    }

    public void show(){
        fill(r,g,b);
        ellipse(x, y, sx, sy);
        mover();
    }

    private void mover(){
        x -= stepX;
        y -= stepY;
    }

    public boolean checkOutOfBounds(){
        if(x>width || x<0 || y>height || y<0){
            return true;
        }else{
            return false;
        }
    }

    public boolean checkCollision(){
        Player tempPlayer = selectTempPlayer();
        if(tempPlayer != clnPlayer){
            if(clnPlayer.x + (clnPlayer.sx/2) > x-(sx/2)
                && clnPlayer.x - (clnPlayer.sx/2) < x + (sx/2)
                && clnPlayer.y + (clnPlayer.sy/2) > y-(sy/2)
                && clnPlayer.y - (clnPlayer.sy/2) < y + (sy/2) ){
                    clnPlayer.takeDamage(bulletDamage);
                    return true;
            }
        }else{
            if(srvPlayer.x + (srvPlayer.sx/2) > x - (sx/2)
                && srvPlayer.x - (srvPlayer.sx/2) < x + (sx/2)
                && srvPlayer.y + (srvPlayer.sy/2) > y-(sy/2)
                && srvPlayer.y - (srvPlayer.sy/2) < y + (sy/2) ){
                    clnPlayer.takeDamage(bulletDamage);
                    return true;
            }
        }
        return false;
    }
}

class Wall{
    public float x, y, sx, sy;

    Wall(float xx, float yy, float sxx, float syy){
        x = xx; y = yy; sx = sxx; sy = syy;
    }

    public void show(){
        fill(0);
        rect(x, y, sx, sy);
    }

    public boolean checkCollision(float xx, float yy, float sxx, float syy){
        for (
            x + sx/2 < xx - sxx &&
            x - sx/2 > xx + sxx &&
            y + sy/2 < yy - syy &&
            y - sy/2 > yy + syy
        ){return true;}
        else{return false;}
    }
}
